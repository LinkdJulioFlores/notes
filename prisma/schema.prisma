// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  webhookInfo   WebhookInfo?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  ID    String @id @default(cuid())
  data  String
  title String

  createdOn DateTime @default(now())
  updatedOn DateTime
}

// This setup allows for flexibility but we'll scope it to
// just one host for this demo

// Each hostURL gets many events
model WebhookInfo {
  ID            String         @id @default(cuid())
  userID        String         @unique
  hostURL       String // The target of all webhooks
  webhookEvents WebhookEvent[] // Can listen to many events
  user          User           @relation(fields: [userID], references: [id])
}

model WebhookEvent {
  ID            String      @id @default(cuid())
  event         EventType // The corresponding event type
  webhookInfoID String // The ID of the parent Webhook
  webhookInfo   WebhookInfo @relation(fields: [webhookInfoID], references: [ID])
  enabled       Boolean     @default(false)

  createdOn DateTime @default(now())

  @@unique([webhookInfoID, event], name: "webhookInfoID_event")
}

enum EventType {
  NOTE_CREATE
  NOTE_READ
  NOTE_UPDATE
  NOTE_DELETE
}
