/**
 * LAYOUT.TSX - THE HOUSE BLUEPRINT FOR OUR WEBSITE
 *
 * Imagine you're building a house. Before you can put in the furniture (your web pages),
 * you need to build the foundation, walls, and basic structure. That's what this file does
 * for our website! It creates the "house" that all our web pages will live inside.
 *
 * Think of it like this:
 * - Your house has walls, a roof, electricity, and plumbing
 * - Our website has HTML structure, fonts, authentication, and data connections
 * - Just like every room in your house uses the same electricity and plumbing,
 *   every page on our website uses the same layout structure!
 */

// IMPORTING OUR TOOLS (like getting paint, brushes, and materials)
import "@/styles/globals.css"; // Global styles - like painting the whole house the same base color

import { type Metadata } from "next"; // Instructions for how to describe our website
import { Geist } from "next/font/google"; //

import { TRPCReactProvider } from "@/trpc/react";
import { SessionProvider } from "next-auth/react";

import { auth } from "@/server/auth/index";

/**
 * METADATA - THE ID CARD FOR YOUR WEBSITE
 *
 * Imagine your website needs an ID card to introduce itself to the world. This metadata
 * is like that ID card! It tells:
 * - The website's name (title) - like your name on an ID card
 * - What the website is about (description) - like a short bio
 * - The website's picture (icon) - like your photo on an ID card
 *
 * Why is this useful?
 * - When someone shares your website on social media, it shows this info
 * - Search engines like Google use this to understand your website
 * - Browser tabs show the title and icon
 * - It's like having a business card for your website!
 * - If you hover over type MetaData
 */
export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

/**
 * FONT SETUP - CHOOSING THE HANDWRITING FOR YOUR WEBSITE
 *
 * Just like how you might choose different fonts when writing a poster or homework,
 * websites need to pick fonts too! This code is like going to a font store and saying:
 * "I want the Geist font, and I want it to work with English letters (latin)"
 *
 * The "variable" part creates a nickname for this font that we can use throughout
 * our website - it's like giving the font a shorter name so we don't have to say
 * "that really nice Geist font" every time.
 */
const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
});

/**
 * THE MAIN LAYOUT FUNCTION - THE MASTER TEMPLATE
 *
 * This is like a cookie cutter that shapes every page on your website. Just like how
 * a cookie cutter makes sure all cookies have the same basic shape, this function
 * makes sure all pages have the same basic structure.
 *
 * Let's break it down:
 *
 * "children" = This is like a placeholder box. Whatever page someone visits gets
 *              placed inside this box. It's like having a picture frame where you
 *              can swap out different pictures!
 *
 * "session" = This checks if someone is logged in, like a bouncer at a club checking
 *             if you have the right wristband to get in.
 *
 * The HTML structure:
 * - <html> is like the outer walls of your house
 * - <body> is like the interior space where everything happens
 * - The providers are like special rooms with superpowers:
 *   - TRPCReactProvider: Gives every page the ability to talk to the server
 *   - SessionProvider: Gives every page the ability to know who's logged in
 */
export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const session = await auth();
  return (
    <html lang="en" className={`${geist.variable}`}>
      <body>
        {/*
          TRPCReactProvider - THE TELEPHONE SYSTEM FOR YOUR WEBSITE

          Imagine your website is like a big apartment building, and each page is like
          a different apartment. Sometimes people in the apartments need to call the
          front desk (the server) to ask questions or get information.

          TRPCReactProvider is like installing a telephone system in the whole building!
          It makes sure that every apartment (page) has access to a phone so they can:
          - Ask the server for data (like "What's the weather?")
          - Send information to the server (like "Save my homework")
          - Talk to the database (like "Show me all my friends")

          Without this "phone system," your pages would be isolated and couldn't get
          any information from the server. It's like having apartments with no phones!
        */}
        <TRPCReactProvider>
          {/*
            SessionProvider - THE SECURITY GUARD FOR YOUR WEBSITE

            Think of SessionProvider like a really smart security guard who remembers
            everyone who comes into the building. This guard:

            - Checks if someone is allowed to be here (are they logged in?)
            - Remembers who they are even when they move between different floors (pages)
            - Keeps track of their "visitor pass" (login session)
            - Makes sure they don't have to show their ID at every single door

            Without this security guard, every time you moved to a new page, the website
            would forget who you are! You'd have to log in again and again, which would
            be super annoying. It's like having to show your ID every time you walk
            through a different door in the same building.

            The "session" prop is like giving the guard a clipboard with information
            about who's currently visiting, so they know who to let in.
          */}
          <SessionProvider session={session}>{children}</SessionProvider>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
